version: '3.8'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: olitravel-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-olitravel}
      POSTGRES_USER: ${DB_USER:-olitravel_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-olitravel_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis Cache (опционально)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: olitravel-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # Application (Frontend + API)
  # ============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: olitravel-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-olitravel_user}:${DB_PASSWORD:-changeme123}@postgres:5432/${DB_NAME:-olitravel}
      REDIS_URL: redis://redis:6379
      PORT: 3000
      HOST: 0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./public/uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Nginx Reverse Proxy (для production)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: olitravel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./public:/var/www/html:ro
    depends_on:
      - app

  # ============================================
  # Certbot (для SSL сертификатов)
  # ============================================
  certbot:
    image: certbot/certbot
    container_name: olitravel-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
